searchState.loadedDescShard("blsttc", 0, "A pairing-based threshold cryptosystem for collaborative …\nAn encrypted message.\nThe domain separator tag\nA decryption share. A threshold of decryption shares can …\nRepresents an element of the scalar field $\\mathbb{F}_q$ …\nThis is an element of $\\mathbb{G}_1$ represented in the …\nThis is an element of $\\mathbb{G}_1$ represented in the …\nThis is an element of $\\mathbb{G}_2$ represented in the …\nThis is an element of $\\mathbb{G}_2$ represented in the …\nA conversion into an element of the field <code>Fr</code>.\nBls12-381 engine\nThe size of a key’s representation in bytes.\nA public key.\nA public key and an associated set of public key shares.\nA public key share.\nThe size of a signature’s representation in bytes.\nThe size of a secret key’s representation in bytes.\nA secret key; wraps a single prime field element. The …\nA secret key and an associated set of secret key shares.\nA secret key share.\nA signature.\nA signature share.\nAdds this point to another point in the affine model.\nCombines the shares into a signature that can be verified …\nReturns the decrypted text, or <code>None</code>, if the ciphertext isn…\nCombines the shares to decrypt the ciphertext.\nReturns a decryption share, or <code>None</code>, if the ciphertext isn…\nReturns a decryption share, without validating the …\nDerives a child public key for a given index.\nDerives a child public key share for a given index.\nDerives a child secret key for a given index.\nDerives a child secret key share for a given index.\nDerives a child public key set for a given index.\nDerives a child secret key set for a given index.\nEncrypts the message using the OS random number generator.\nEncrypts the message.\nCrypto errors.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the key with the given representation, if valid.\nReturns the key share with the given representation, if …\nReturns the signature with the given representation, if …\nReturns the signature share with the given representation, …\nDeserialize from big endian bytes\nDeserializes from big endian bytes\nReturns the Ciphertext with the given representation, if …\nDeserializes the share from big endian bytes\nDeserializes from big endian bytes\nDeserializes from big endian bytes\nAttempts to convert a big-endian byte representation of a …\nAttempts to convert a little-endian byte representation of …\nAttempts to deserialize a compressed element.\nAttempts to deserialize a compressed element.\nAttempts to deserialize a compressed element.\nAttempts to deserialize a compressed element.\nAttempts to deserialize an uncompressed element, not …\nAttempts to deserialize an uncompressed element, not …\nAttempts to deserialize an uncompressed element, not …\nAttempts to deserialize an uncompressed element, not …\nDeserialize a hex-encoded representation of a <code>PublicKey</code> to …\nDeserialize a hex-encoded representation of a <code>SecretKey</code> to …\nCreates a new <code>SecretKey</code> from a mutable reference to a …\nCreates a new <code>SecretKeyShare</code> from a mutable reference to a …\nConverts a little-endian non-Montgomery form <code>repr</code> into a …\nCreates a new deterministic SecretKey from a seed.\nAttempts to deserialize an uncompressed element.\nAttempts to deserialize an uncompressed element.\nAttempts to deserialize an uncompressed element.\nAttempts to deserialize an uncompressed element.\nAttempts to deserialize an uncompressed element, not …\nAttempts to deserialize an uncompressed element, not …\nAttempts to deserialize an uncompressed element, not …\nAttempts to deserialize an uncompressed element, not …\nReturns a hash of the given message in <code>G2</code>.\nHash to curve algorithm.\nHash to curve algorithm.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts <code>self</code> to a field element.\nReturns true if this point is on the curve. This should …\nReturns true if this point is on the curve. This should …\nReturns true if this point is on the curve. This should …\nReturns true if this point is on the curve. This should …\nReturns true if this point is free of an $h$-torsion …\nReturns true if this point is free of an $h$-torsion …\nMultiplies <code>self</code> with <code>3</code>, returning the result.\nPerform a multi-exponentiation, aka “…\nPerform a multi-exponentiation, aka “…\nComputes $$\\sum_{i=1}^n \\textbf{ML}(a_i, b_i)$$ given a …\nReturns <code>true</code> if the signature contains an odd number of …\nUtilities for distributed key generation: uni- and …\nReturns a reference to the polynomial\nReturns the matching public key.\nReturns the public key.\nReturns the matching public key share.\nReturns the <code>i</code>-th public key share.\nReturns the corresponding public key set. That information …\nCreates a new random instance of <code>SecretKey</code>.\nCreates a set of secret key shares, where any <code>threshold + 1</code>…\nGenerates a non-redacted debug string. This method differs …\nGenerates a non-redacted debug string. This method differs …\nReturns the secret master key.\nReturns the <code>i</code>-th secret key share.\nSerialization and deserialization implementations for …\nLeft shift <code>self</code> by <code>count</code>, returning the result.\nRight shift <code>self</code> by <code>count</code>, returning the result.\nSigns the given message.\nSigns the given message.\nSigns the given element of <code>G2</code>.\nSigns the given element of <code>G2</code>.\nCalculates the <code>square</code> of this element.\nReturns the threshold <code>t</code>: any set of <code>t + 1</code> signature shares …\nReturns the threshold <code>t</code>: any set of <code>t + 1</code> signature shares …\nReturns a byte string representation of the public key.\nReturns a byte string representation of the public key …\nReturns a byte string representation of the signature.\nReturns a byte string representation of the signature …\nConverts the secret key to big endian bytes\nSerializes to big endian bytes\nReturns byte representation of Ciphertext\nSerializes the share as big endian bytes\nSerializes to big endian bytes\nSerializes to big endian bytes\nConverts an element of <code>Scalar</code> into a byte representation in\nConverts an element of <code>Scalar</code> into a byte representation in\nSerializes this element into compressed form.\nSerializes this element into compressed form.\nSerializes this element into compressed form.\nSerializes this element into compressed form.\nSerialize this <code>PublicKey</code> instance to a hex-encoded <code>String</code>.\nSerialize this <code>SecretKey</code> instance to a hex-encoded <code>String</code>.\nConverts a Montgomery form <code>Scalar</code> into little-endian …\nSerializes this element into uncompressed form.\nSerializes this element into uncompressed form.\nSerializes this element into uncompressed form.\nSerializes this element into uncompressed form.\nCreates a set of secret key shares, where any <code>threshold + 1</code>…\nReturns <code>true</code> if the signature matches the message.\nReturns <code>true</code> if the signature matches the message.\nReturns <code>true</code> if this is a valid ciphertext. This check is …\nReturns <code>true</code> if the decryption share matches the …\nReturns <code>true</code> if the signature matches the element of <code>G2</code>.\nReturns <code>true</code> if the signature matches the element of <code>G2</code>.\nReturns the x coordinate.\nReturns the x coordinate.\nReturns the x coordinate.\nReturns the x coordinate.\nReturns the y coordinate.\nReturns the y coordinate.\nReturns the y coordinate.\nReturns the y coordinate.\nReturns the z coordinate.\nReturns the z coordinate.\nThe degree is too high for the coefficients to be indexed …\nSamples for interpolation contain a duplicated index.\nContains the error value\nA crypto error.\nThe result of Hash To Field is zero which should never …\nAn error converting to or from a hex representation of a …\nAn error reading a structure from an array of bytes. …\nNot enough signature shares.\nContains the success value\nA crypto result.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCurrent number of signature shares\nRequired number of signature shares\nA commitment to a symmetric bivariate polynomial.\nA symmetric bivariate polynomial in the prime field.\nA commitment to a univariate polynomial.\nA univariate polynomial in the prime field.\nReturns the corresponding commitment.\nReturns the corresponding commitment. That information can …\nReturns the polynomial with constant value <code>c</code>.\nReturns the degree.\nReturns the polynomial’s degree.\nReturns the polynomial’s degree; which is the same in …\nReturns the polynomial’s degree: It is the same in both …\nReturns the value at the point <code>i</code>.\nReturns the <code>i</code>-th public key share.\nReturns the polynomial’s value at the point <code>(x, y)</code>.\nReturns the commitment’s value at the point <code>(x, y)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserializes from big endian bytes\nDeserializes from big endian bytes\nDeserializes from big endian bytes\nDeserializes from big endian bytes\nReturns the identity function, i.e. the polynomial “<code>x</code>”.\nReturns the unique polynomial <code>f</code> of degree <code>samples.len() - 1</code>…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the polynomial is the constant value <code>0</code>.\nReturns the (monic) monomial: <code>x.pow(degree)</code>.\nReturns the polynomial with constant value <code>1</code>.\nCreates a random polynomial.\nCreates a random polynomial.\nGenerates a non-redacted debug string. This method differs …\nGenerates a non-redacted debug string. This method differs …\nReturns the <code>x</code>-th row, as a univariate polynomial.\nReturns the <code>x</code>-th row, as a commitment to a univariate …\nSerializes to big endian bytes\nSerializes to big endian bytes\nSerializes to big endian bytes\nSerializes to big endian bytes\nCreates a random polynomial. This constructor is identical …\nCreates a random polynomial.\nReturns the polynomial with constant value <code>0</code>.\nA wrapper type to facilitate serialization and …\n<code>SerdeSecret</code> is a wrapper struct for serializing and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the actual secret contained in the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the wrapped field element.\nReturns the actual secret from the wrapper")